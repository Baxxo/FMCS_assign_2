svgfile "plant.svg";

const int floraX = 6;
const int floraY = 3;

const int mineralX = 1;
const int mineralY = 1;

const int liquidX = 2;
const int liquidY = 3;

const int fossilX = 5;
const int fossilY = 2;

const int ChargeStation1_X = 3;
const int ChargeStation1_Y = 4;

const int ChargeStation2_X = 4;
const int ChargeStation2_Y = 1;

const int UncontrollCell_X = 3;
const int UncontrollCell_Y = 2;

// Charge Battery of Rover Yellow
controllable event ChargeBatteryY;

// Movement for Yellow Rover
controllable event RoverYMoveUp;
controllable event RoverYMoveDown;
controllable event RoverYMoveRight;
controllable event RoverYMoveLeft;

uncontrollable event uRoverYMoveUp;
uncontrollable event uRoverYMoveDown;
uncontrollable event uRoverYMoveRight;
uncontrollable event uRoverYMoveLeft;

// Rover Yellow step on an item
controllable event RoverYMineral;
controllable event RoverYLiquid;
controllable event RoverYFlora;
controllable event RoverYFossil;

// Rover Yellow empty items because it is on the lab
controllable event RoverYUnload;

plant RoverYellow:

    disc int[1..6] positionX = 3; // 200 = (3-1) * 100
    disc int[1..4] positionY = 4; // 0 = 300 - (300) = 300 - (100 * (4 - 1))
    disc int[0..8] battery = 8;
    disc int[0..3] mineral = 0;
    disc int[0..3] liquid = 0;
    disc int[0..3] flora = 0;
    disc int[0..3] fossil = 0;

    location CHARGING: initial; marked;

        edge ChargeBatteryY do battery := 8 goto MOVE;

        edge RoverYMoveUp when positionY < 4 and battery > 1
            do positionY := positionY + 1, battery := battery -1 goto MOVE;

        edge RoverYMoveDown when positionY > 1  and battery > 1
            do positionY := positionY - 1, battery := battery -1 goto MOVE;

        edge RoverYMoveRight when positionX < 6 and battery > 1
            do positionX := positionX + 1, battery := battery -1 goto MOVE;

        edge RoverYMoveLeft when positionX > 1 and battery > 1
            do positionX := positionX - 1, battery := battery -1 goto MOVE;

    location MOVE:

        edge RoverYMoveUp when positionY < 4 and battery > 1
            do positionY := positionY + 1, battery := battery -1;

        edge RoverYMoveDown when positionY > 1  and battery > 1
            do positionY := positionY - 1, battery := battery -1;

        edge RoverYMoveRight when positionX < 6 and battery > 1
            do positionX := positionX + 1, battery := battery -1;

        edge RoverYMoveLeft when positionX > 1 and battery > 1
            do positionX := positionX - 1, battery := battery -1;

        edge ChargeBatteryY when (
            (ChargeStation1_X = positionX and ChargeStation1_Y = positionY) or
            (ChargeStation2_X = positionX and ChargeStation2_Y = positionY)
        ) do battery := 8 goto CHARGING;

        edge uRoverYMoveUp, uRoverYMoveDown, uRoverYMoveRight, uRoverYMoveLeft when
            positionY = UncontrollCell_Y and positionX = UncontrollCell_X;

        edge RoverYMineral when
            mineral < 3 and mineralX = positionX and mineralY = positionY
            do mineral := mineral + 1;
        edge RoverYLiquid when
            liquid < 3 and liquidX = positionX and liquidY = positionY
            do liquid := liquid + 1;
        edge RoverYFlora when
            flora < 3 and floraX = positionX and floraY = positionY
            do flora := flora + 1;
        edge RoverYFossil when
            fossil < 3 and fossilX = positionX and fossilY = positionY
            do fossil := fossil + 1;

        edge RoverYUnload when
            (mineral > 0 or liquid > 0 or flora > 0 or fossil > 0) and
            positionX = Lab_X and positionY = Lab_Y
            do mineral := 0, liquid := 0, flora := 0, fossil := 0;

end

svgout id "yellow-cell-1" attr "fill" value if RoverYellow.battery < 1 : "lightgray" else "yellow" end;
svgout id "yellow-cell-2" attr "fill" value if RoverYellow.battery < 2 : "lightgray" else "yellow" end;
svgout id "yellow-cell-3" attr "fill" value if RoverYellow.battery < 3 : "lightgray" else "yellow" end;
svgout id "yellow-cell-4" attr "fill" value if RoverYellow.battery < 4 : "lightgray" else "yellow" end;
svgout id "yellow-cell-5" attr "fill" value if RoverYellow.battery < 5 : "lightgray" else "yellow" end;
svgout id "yellow-cell-6" attr "fill" value if RoverYellow.battery < 6 : "lightgray" else "yellow" end;
svgout id "yellow-cell-7" attr "fill" value if RoverYellow.battery < 7 : "lightgray" else "yellow" end;
svgout id "yellow-cell-8" attr "fill" value if RoverYellow.battery < 8 : "lightgray" else "yellow" end;
svgout id "yellow_rover" attr "x" value (RoverYellow.positionX - 1) * 100;
svgout id "yellow_rover" attr "y" value 300 - ((RoverYellow.positionY - 1) * 100);
svgout id "x-axis-ry" text value RoverYellow.positionX;
svgout id "y-axis-ry" text value RoverYellow.positionY;
svgout id "mineral-yellow" text value RoverYellow.mineral;
svgout id "fossil-yellow" text value RoverYellow.fossil;
svgout id "liquid-yellow" text value RoverYellow.liquid;
svgout id "flora-yellow" text value RoverYellow.flora;

// Charge Battery of Rover Blue
controllable event ChargeBatteryB;

// Movement for Blue Rover
controllable event RoverBMoveUp;
controllable event RoverBMoveDown;
controllable event RoverBMoveRight;
controllable event RoverBMoveLeft;

uncontrollable event uRoverBMoveUp;
uncontrollable event uRoverBMoveDown;
uncontrollable event uRoverBMoveRight;
uncontrollable event uRoverBMoveLeft;

// Rover Blue step on an item
controllable event RoverBMineral;
controllable event RoverBLiquid;
controllable event RoverBFlora;
controllable event RoverBFossil;

// Rover Blue empty items because it is on the lab
controllable event RoverBUnload;

plant RoverBlue:

    disc int[1..6] positionX = 4; // 300 = (4-1) * 100 = 3 * 100
    disc int[1..4] positionY = 1; // 300 = 300 - (0) = 300 - (100 * (1 - 1))
    disc int[0..8] battery = 8;
    disc int[0..3] mineral = 0;
    disc int[0..3] liquid = 0;
    disc int[0..3] flora = 0;
    disc int[0..3] fossil = 0;

    location CHARGING: initial; marked;

        edge ChargeBatteryB do battery := 8 goto MOVE;

        edge RoverBMoveUp when positionY < 4 and battery > 1
            do positionY := positionY + 1, battery := battery -1 goto MOVE;

        edge RoverBMoveDown when positionY > 1  and battery > 1
            do positionY := positionY - 1, battery := battery -1 goto MOVE;

        edge RoverBMoveRight when positionX < 6 and battery > 1
            do positionX := positionX + 1, battery := battery -1 goto MOVE;

        edge RoverBMoveLeft when positionX > 1 and battery > 1
            do positionX := positionX - 1, battery := battery -1 goto MOVE;

    location MOVE:

        edge RoverBMoveUp when positionY < 4 and battery > 1
            do positionY := positionY + 1, battery := battery -1;

        edge RoverBMoveDown when positionY > 1  and battery > 1
            do positionY := positionY - 1, battery := battery -1;

        edge RoverBMoveRight when positionX < 6 and battery > 1
            do positionX := positionX + 1, battery := battery -1;

        edge RoverBMoveLeft when positionX > 1 and battery > 1
            do positionX := positionX - 1, battery := battery -1;

        edge ChargeBatteryB when (
            (ChargeStation1_X = positionX and ChargeStation1_Y = positionY) or
            (ChargeStation2_X = positionX and ChargeStation2_Y = positionY)
        ) do battery := 8 goto CHARGING;

        edge uRoverBMoveUp, uRoverBMoveDown, uRoverBMoveRight, uRoverBMoveLeft when
            positionY = UncontrollCell_Y and positionX = UncontrollCell_X;

        edge RoverBMineral when
            mineral < 3 and mineralX = positionX and mineralY = positionY
            do mineral := mineral + 1;
        edge RoverBLiquid when
            liquid < 3 and liquidX = positionX and liquidY = positionY
            do liquid := liquid + 1;
        edge RoverBFlora when
            flora < 3 and floraX = positionX and floraY = positionY
            do flora := flora + 1;
        edge RoverBFossil when
            fossil < 3 and fossilX = positionX and fossilY = positionY
            do fossil := fossil + 1;

        edge RoverBUnload when
            (mineral > 0 or liquid > 0 or flora > 0 or fossil > 0) and
            positionX = Lab_X and positionY = Lab_Y
            do mineral := 0, liquid := 0, flora := 0, fossil := 0;

end

controllable event processesed;
controllable event transmited;

const int Lab_X = 6;
const int Lab_Y = 1;

plant Lab:

    location READY: initial; marked;
        edge RoverBUnload, RoverYUnload goto BUSY;

    location BUSY: marked;
        edge processesed goto TRANSMIT;

    location TRANSMIT: marked;
        edge transmited goto READY;

end

svgout id "blue-cell-1" attr "fill" value if RoverBlue.battery < 1 : "lightgray" else "blue" end;
svgout id "blue-cell-2" attr "fill" value if RoverBlue.battery < 2 : "lightgray" else "blue" end;
svgout id "blue-cell-3" attr "fill" value if RoverBlue.battery < 3 : "lightgray" else "blue" end;
svgout id "blue-cell-4" attr "fill" value if RoverBlue.battery < 4 : "lightgray" else "blue" end;
svgout id "blue-cell-5" attr "fill" value if RoverBlue.battery < 5 : "lightgray" else "blue" end;
svgout id "blue-cell-6" attr "fill" value if RoverBlue.battery < 6 : "lightgray" else "blue" end;
svgout id "blue-cell-7" attr "fill" value if RoverBlue.battery < 7 : "lightgray" else "blue" end;
svgout id "blue-cell-8" attr "fill" value if RoverBlue.battery < 8 : "lightgray" else "blue" end;
svgout id "blue_rover" attr "x" value (RoverBlue.positionX - 1) * 100;
svgout id "blue_rover" attr "y" value 300 - ((RoverBlue.positionY - 1) * 100);
svgout id "x-axis-rb" text value RoverBlue.positionX;
svgout id "y-axis-rb" text value RoverBlue.positionY;
svgout id "mineral-blue" text value RoverBlue.mineral;
svgout id "fossil-blue" text value RoverBlue.fossil;
svgout id "liquid-blue" text value RoverBlue.liquid;
svgout id "flora-blue" text value RoverBlue.flora;
